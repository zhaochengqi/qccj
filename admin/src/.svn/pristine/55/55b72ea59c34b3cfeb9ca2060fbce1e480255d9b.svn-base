<template>
    <el-dialog title="通知邮箱" :visible.sync="dialogFormVisible" v-loading="loading" element-loading-text="拼命加载中" close-on-press-escape @close="cleardialog">
        <el-form :model="form" label-width="120px" ref="form" onsubmit="return false;">
            <el-row>
                <el-form-item label="通知邮箱" required prop="email">
                    <el-col :md="18" v-model="form.email">
                        <el-tag :key="tag" v-for="tag in dynamicTags" :closable="true" :close-transition="false"  @close="handleClose(tag)">{{tag}}
                        </el-tag>
                        <el-input class="input-new-tag" v-if="inputVisible" v-model="inputValue" ref="saveTagInput" size="mini" @keyup.enter.native="handleInputConfirm" @blur="handleInputConfirm">
                        </el-input>
                        <el-button v-else class="button-new-tag" size="small" @click="showInput">+ 添加新邮箱</el-button>
                    </el-col>
                </el-form-item>
                <el-form-item label="通知频率" required  prop="intervals"> 
                     <el-radio-group v-model="form.intervals" style="margin-top:5px;width:400px;" >
                        <!-- <el-radio :label="index"  v-for="(item,index) in youxiang_data" :value="item" :key="index" >{{item}}</el-radio> -->
                        <el-radio :label="1" >每隔半个小时</el-radio>
                        <el-radio :label="2" >每隔1个小时</el-radio>
                        <el-radio :label="3" >每隔2个小时</el-radio>
                        <el-radio :label="4"  style="margin-left: 0px;">每天早上8点</el-radio>
                        <el-radio :label="5" >每天中午12点</el-radio>
                    </el-radio-group>
                </el-form-item>
            </el-row>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button type="primary" @click="saveData('form')"  :loading="loadingbiao">保存</el-button>
        </div>
    </el-dialog>
</template>
<script>
import {
    mapState
} from 'vuex'
var zzEmail = /^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/;
export default {

    props: ['dialogStatus'],
    data() {
        return {
            loading: false,
            loadingbiao: false,
            dialogFormVisible: false,
            form: {
                email: [],
                intervals:1
            },
            dynamicTags:[],
            inputVisible: false,
            inputValue: ''

        }
    },
    watch: {
        dialogStatus(newValue, oldValue) {
            this.dialogFormVisible = newValue
        },
    },
    methods: {
        //保存数据
          handleInputConfirm() {  
            if (this.inputValue) {
              this.dynamicTags.push(this.inputValue);
            } 
            this.inputVisible = false;
            this.inputValue = '';
          },
        saveData() {
            this.form.email=this.dynamicTags
            this.loadingbiao = true
            var url
            url = this.API_ROOT + '/api/docking/configemail';
            this.axios({
                method: 'post',
                url: url,
                data: this.form,
                headers: this.$store.getters.Request_Head
            }).then((response) => {
                if (response.data.status.code !== 1001) {
                    this.$message.error(response.data.data ? response.data.data : response.data.status.title)
                } else {
                    this.dialogFormVisible = false
                    this.$message.success('数据保存成功');
                }
                 this.loadingbiao = false
            }, (error) => {
                this.loadingbiao = false
                this.$emit('API-ERR');
            })
        },
        cleardialog() {
            this.form = {
                email: '',
                intervals:1
            }
            this.$emit('CB-dialogStatus')
        },
        handleClose(tag) {
            this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);
          },

        showInput() {
            this.inputVisible = true;
            this.$nextTick(_ => {
              this.$refs.saveTagInput.$refs.input.focus();
            });
          }
    },
    //计算属性
    computed: mapState({

    }),
}
</script>

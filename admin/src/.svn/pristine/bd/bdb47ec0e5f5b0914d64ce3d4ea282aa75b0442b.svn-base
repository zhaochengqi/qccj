<template>
    <el-card class="box-card" v-loading="loading" element-loading-text="拼命加载中">
        <div slot="header" class="clearfix">
            <el-row>
                <el-col :span="24" class="text-right">
                    <goBack></goBack>
                </el-col>
            </el-row>
        </div>
        <el-row>
            <el-col :span="23">
                <el-form :model="form" ref="form" :rules="rules" label-width="120px" label-suffix='：'>
                    <el-form-item label="用户名" required prop="account">
                        <el-input :disabled="disabled" v-model="form.account"></el-input>
                    </el-form-item>
                    <el-form-item label="姓名" prop="name">
                        <el-input v-model="form.name"></el-input>
                    </el-form-item>
                    <el-form-item label="手机" prop="phone">
                        <el-input v-model="form.phone"></el-input>
                    </el-form-item>
                    <el-form-item label="邮箱" required prop="email">
                        <el-input v-model="form.email"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" size="large" @click="onSubmit">确定保存</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </el-row>
    </el-card>
</template>
<script type="text/javascript">
var zz = /^[a-zA-Z0-9]{6,20}$/;
var zzEmail = /^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/;
export default {
    props: ['dialogFormVisible', 'id'],
    data() {
        return {
            form: {
                group_id: [],
                account: "",
                name: "",
                password: "",
                qrpassword: "",
                phone: '',
                email: ''
            },
            disabled: false,
            url: '',
            formLabelWidth: '120px',
            dialogVisible: false,
            //教师ID
            uid: '',
            //教师姓名
            name: '',
            rules: {
                group_id: [{
                    type: 'array',
                    required: true,
                    message: '请选择角色组！',
                    trigger: 'change'
                }],
                account: [{
                    validator: (rule, value, callback) => {
                        if (value === '') {
                            callback(new Error('请输入用户名！'));
                        } else {
                            if (!zz.test(value)) {
                                callback(new Error('用户名只能是6-20位英文大小写字母,数字！'));
                            }
                            callback();
                        }
                    },
                    trigger: 'blur'
                }],
                name: [{
                    required: true,
                    message: '请输入姓名！',
                    trigger: 'blur'
                }],
                email: [{
                    validator: (rule, value, callback) => {
                        if (value === '') {
                            callback(new Error('请输入邮箱！'));
                        } else {
                            if (!zzEmail.test(value)) {
                                callback(new Error('请输入格式正确邮箱！'));
                            }
                            callback();
                        }
                    },
                    trigger: 'blur'
                }],
                password: [{
                    validator: (rule, value, callback) => {
                        if (value === '') {
                            callback(new Error('请输入密码！'));
                        } else {
                            if (this.form.qrpassword !== '') {
                                this.$refs['form'].validateField('qrpassword');
                            }
                            callback();
                        }
                    },
                    trigger: 'blur'
                }],
                qrpassword: [{
                    validator: (rule, value, callback) => {
                        if (value === '') {
                            callback(new Error('请再次输入密码！'));
                        } else if (value !== this.form.password) {
                            callback(new Error('两次输入密码不一致！'));
                        } else {
                            callback();
                        }
                    },
                    trigger: 'blur'
                }],
            },
        }
    },
    watch: {
        'dialogFormVisible': function(newvalue, oldvalue) {
            this.dialogVisible = newvalue
            if (!newvalue)
                this.$refs['form'].resetFields();
        },
        'id': function(newvalue, oldvalue) {
            if (newvalue == oldvalue) return;
            if (newvalue && newvalue != -1) {
                this.disabled = true;
                this.url = this.API_ROOT + '/api/user/update'
                this.getData()
            } else {
                this.disabled = false;
                this.url = this.API_ROOT + '/api/user/insert'
            }
        }
    },
    methods: {
        //确定
        onSubmit() {
            this.$refs['form'].validate((valid) => {
                if (valid) {
                    this.setData()
                } else {
                    return false
                }
            })
        },
        closeDialog() {
            this.form = {
                group_id: [],
                account: "",
                name: "",
                password: "",
                qrpassword: "",
                phone: '',
                email: ''
            };
            this.$emit('CB-dialogFormVisible');
        },
        //插入数据
        setData() {
            this.form.group_id = this.form.group_id.join(",")
            this.axios({
                method: 'post',
                url: this.url,
                data: this.form,
                headers: this.$store.getters.Request_Head
            }).then((response) => {
                if (response.data.status.code !== 1001) {
                    this.form.group_id = this.setArray(this.form.group_id);
                    this.$message.error(response.data.data ? response.data.data : response.data.status.title)
                } else {
                    this.dialogVisible = false;
                    this.$message.success('数据保存成功');
                }
            }, (error) => {
                this.form.group_id = this.setArray(this.form.group_id);
                this.$emit('API-ERR')
            })
        },
        //重置返回INT值得数组
        setArray(val) {
            val = val.split(",");
            for (var i = 0; i < val.length; i++) {
                val[i] = parseInt(val[i])
            }
            return val
        },
        //获取数据
        getData() {
            this.axios({
                method: 'post',
                url: this.API_ROOT + '/api/user/read',
                data: {
                    id: this.id
                },
                headers: this.$store.getters.Request_Head
            }).then((response) => {
                if (response.data.status.code !== 1001) {
                    this.form.group_id = []
                    this.$message.error(response.data.data ? response.data.data : response.data.status.title)
                } else {
                    this.form = response.data.data
                    this.form.qrpassword = this.form.password
                    this.form.group_id = this.form.group_id.split(",")
                    for (var i in this.form.group_id) {
                        this.form.group_id[i] = Number(this.form.group_id[i])
                    }
                }
            }, (error) => {
                this.form.group_id = []
                this.$emit('API-ERR')
            })
        }
    },
    computed: {
        rules_juesezu: function() {
            return this.$store.state.rules_juesezu
        }
    }
}
</script>

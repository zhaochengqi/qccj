<template>
    <el-card class="box-card" v-loading="loading" element-loading-text="拼命加载中">
        <div slot="header" class="clearfix">
            <el-row>
                <el-col :md="6" :sm="6" class="pad-rgt">
                    <el-input placeholder="检索：姓名/企业名称 " icon="search" @change="KeysChange" v-model="keys">
                    </el-input>
                </el-col>
                <el-col :md="4" :sm="4" class="pad-rgt">
                    <el-select v-model="tid" clearable @change="duijieSelect" placeholder="不限用户" style="width:100%;">
                        <el-option label="企业用户对接" value="2"> </el-option>
                        <el-option label="个人用户对接" value="1"> </el-option>
                    </el-select>
                </el-col>
                <el-col :md="4" :sm="4" class="pad-rgt">
                    <el-select v-model="docking" clearable @change="suqiuSelect" placeholder="不限诉求" style="width:100%;">
                        <el-option :label="item" :value="index+1" :key="index" v-for="(item,index) in dockingArr"> </el-option>
                    </el-select>
                </el-col>
                <el-col :md="10" :sm="10" class="text-right">
                    <el-button-group>
                        <el-button type="primary" class="daochu_xiangmu" @click="handleSelect('')">
                            <i class='fa fa-envelope-o'></i> 通知邮箱
                        </el-button>
                        <el-button type="danger" icon="delete2" v-if="authCheck(145)" class="daochu_xiangmu" @click="handleDelete('')">批量删除</el-button>
                    </el-button-group>
                </el-col>
            </el-row>
        </div>
        <div v-bind:style="{ 'min-height': _PageHeight+'px'}">
            <el-table :data="tableData" stripe highlight-current-row border style="width: 100%" @selection-change="handleSelectionChange" @sort-change="handleSort" :default-sort="{prop: 'add_time', order: 'descending'}">
                <el-table-column type="selection" width="50">
                </el-table-column><!-- 
                <el-table-column prop="tid" fixed min-width="90" show-overflow-tooltip label="用户类型">
                    <template scope="scope">
                        {{scope.row.tid==1?'个人用户':'企业用户'}}
                    </template>
                </el-table-column> -->
                <el-table-column prop="name" min-width="150" show-overflow-tooltip label="姓名/企业名称">
                </el-table-column>
                <el-table-column min-width="100" label="联系电话" prop="phone"></el-table-column>
                <el-table-column prop="email" min-width="120" label="邮箱" show-overflow-tooltip></el-table-column>
                </el-table-column>
                <el-table-column min-width="150" label="对接诉求" show-overflow-tooltip prop="docking">
                    <template scope="scope">
                        {{dockingFilter(scope.row.docking)}}
                    </template>
                </el-table-column>
                <el-table-column prop="add_time" label="申请时间" width="150" sortable="custom">
                </el-table-column>
                <el-table-column label="操作" fixed="right" width="150" align="center" v-if="authCheck(145)">
                    <template scope="scope">
                        <el-button-group>
                            <el-button size="small" type="success" v-if="authCheck(145)" @click="DockingLook(scope.row.id)">
                                <i class="el-icon-search"></i> 查看
                            </el-button>
                            <el-button size="small" type="danger" v-if="authCheck(145)" @click="handleDelete(scope.row.id)">
                                <i class="el-icon-delete2"></i> 删除
                            </el-button>
                        </el-button-group>
                    </template>
                </el-table-column>
            </el-table>
        </div>
        <div class="clearfix">
            <template>
                <el-pagination class="margin-top-20 text-right" @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="_pageSizes" :page-size="_pageSize" layout="total, sizes, prev, pager, next, jumper" :total="total">
                </el-pagination>
            </template>
        </div>
        <selectLinks :dialogStatus="dialog" @CB-dialogStatus="CB_dialogStatus"></selectLinks>
        <dockingRead :dialog='dialogs' :id='id' @CB-Docking='CB_Docking'></dockingRead>
    </el-card>
</template>
<script>
//导入vuex辅助函数
import {
    mapState
} from 'vuex'
import selectLinks from './youxiang'
//查看详情信息
import dockingRead from './dockingRead.vue'

export default {
    activated: function() {
        this.getData()
    },
    data() {
        return {
            dialog: false,
            total: 0,
            loading: false,
            currentPage: 1,
            keys: "",
            tableData: [],
            multipleSelection: [],
            _order: '',
            _sort: '',
            docking: '',
            tid: '',
            dialogs: false,
            id: '',
            label: '所有用户'
        }
    },
    methods: {
        //接收子组件传送过来的数据
        CB_dialogStatus(val) {
            this.dialog = false
            this.getData()
        },
        KeysChange(val) {
            this.keys = val;
            this.getData()
        },
        handleSelect() {
            this.dialog = true
        },
        //查看单个详情
        DockingLook(val) {
            this.id = val;
            this.dialogs = true;
        },
        //自定义查看详情事件
        CB_Docking() {
            this.dialogs = false;
        },
        //排序
        handleSort(val) {
            if (val.prop == null || !val.prop) {
                this._order = "add_time";
                this._sort = 'desc';
            } else {
                this._order = val.prop
                if (val.order == "ascending") {
                    this._sort = "asc"
                } else if (val.order == "descending") {
                    this._sort = "desc"
                }
            }
            this.getData();
        },
        //对接筛选
        duijieSelect(val) {
            if (val == 1)
                this.label = '个人用户'
            else if (val == 2)
                this.label = '企业用户'
            else
                this.label = '所有用户'
            this.tid = val;
            this.getData()
        },
        //诉求筛选
        suqiuSelect(val) {
            this.docking = val;
            this.getData()
        },
        //多选框
        handleSelectionChange(val) {
            this.multipleSelection = val
        },
        //删除数据记录
        handleDelete(id) {
            //判断是批量删除还是单个删除
            if (!id) {
                if (this.multipleSelection.length == 0) {
                    this.$message({
                        type: 'warning',
                        message: '请选择需要删除的内容'
                    });
                    return
                }
            } else {
                //单个删除数据
                this.multipleSelection = id
            }
            this.$confirm('删除后不可恢复，确定要删除吗？', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(() => {
                //批量删除数据
                if (!id) {
                    for (var i in this.multipleSelection) {
                        this.multipleSelection[i] = this.multipleSelection[i].id
                    }
                }
                this.axios({
                    method: 'post',
                    url: this.API_ROOT + '/api/docking/delete',
                    data: {
                        id: this.multipleSelection
                    },
                    headers: this.$store.getters.Request_Head
                }).then((response) => {
                    if (response.data.status.code !== 1001) {
                        this.$message.error(response.data.data ? response.data.data : response.data.status.title)
                    } else {
                        this.$message({
                            message: '数据删除成功！',
                            type: 'success'
                        });
                        this.multipleSelection = []
                        this.getData()
                    }
                }, (error) => {
                    this.$emit('API-ERR');
                })
            }).catch(() => {

            });
        },
        //一页多少条
        handleSizeChange(val) {
            this.$store.commit('setPageSize', val);
            this.getData();
        },
        //页码
        handleCurrentChange(val) {
            this.currentPage = val;
            this.getData();
        },
        getData() {
            //请求数据
            this.loading = true
            this.axios({
                method: 'post',
                url: this.API_ROOT + '/api/docking',
                data: {
                    _order: this._order,
                    _sort: this._sort,
                    keys: this.keys,
                    page: this.currentPage,
                    listRows: this._pageSize,
                    docking: this.docking,
                    tid: this.tid
                },
                headers: this.$store.getters.Request_Head
            }).then((response) => {
                if (response.data.status.code !== 1001) {
                    this.$message.error(response.data.data ? response.data.data : response.data.status.title)
                } else {
                    this.tableData = response.data.data
                    this.total = response.data.count
                }
                this.loading = false
            }, (error) => {
                this.loading = false
                this.$emit('API-ERR');
            })

        },
        //过滤
        'dockingFilter': function(val) {
            let x = [],
                m = 0;
            for (let i = 0; i < this.dockingArr.length; i++) {
                for (let j = 0; j < val.length; j++) {
                    if (i + 1 == val[j]) {
                        x[m] = this.dockingArr[i];
                        m++;
                    }
                }
            }
            return x.join(",")
        }
    },
    computed: mapState({
        news_source_data: state => state.news_source_type,
        _pageSize: state => state.pageSize,
        _pageSizes: state => state.pageSizes,
        group: state => state.userinfo.userinfo.group,
        dockingArr: state => state.dockingArr
    }),
    components: {
        selectLinks,
        dockingRead
    }
}
</script>
